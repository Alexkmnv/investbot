
import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from apscheduler.schedulers.background import BackgroundScheduler
from modules.data_loader import load_all_data
from modules.ml_engine import prepare_dataset, train_model, predict_today
from modules.logger import log_prediction, get_stats, update_actual_returns

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é —Ç–æ–∫–µ–Ω
TOKEN = os.environ.get("TOKEN") 
PORT = int(os.environ.get("PORT", "8443"))

# Telegram
app = Application.builder().token(TOKEN).build()

# –ü–æ–¥–ø–∏—Å—á–∏–∫–∏
subscribers = set()

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø —É–º–Ω—ã–π –∏–Ω–≤–µ—Å—Ç-–±–æ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π /forecast –∏ /subscribe.")

async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    subscribers.add(chat_id)
    await update.message.reply_text("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑—ã!")

async def forecast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –∏ —Å—á–∏—Ç–∞—é –ø—Ä–æ–≥–Ω–æ–∑...")
        data = load_all_data()
        dataset = prepare_dataset(data)
        model, scaler = train_model(dataset)
        predictions = predict_today(model, scaler, data)

        if not predictions:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞.")
            return

        best = predictions[0]
        log_prediction(best[0], best[1], best[1])  # –ø–æ–∫–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–æ
        await update.message.reply_text(f"üìà –õ–∏–¥–µ—Ä –¥–Ω—è: {best[0]} —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é —Ä–æ—Å—Ç–∞ {best[1]*100:.2f}%")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ forecast: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥–Ω–æ–∑–µ: {e}")

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        update_actual_returns()
        summary = get_stats()
        await update.message.reply_text(summary)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

# –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ
def send_forecast_to_all():
    import asyncio
    async def send():
        try:
            data = load_all_data()
            dataset = prepare_dataset(data)
            model, scaler = train_model(dataset)
            predictions = predict_today(model, scaler, data)
            if predictions:
                best = predictions[0]
                log_prediction(best[0], best[1], best[1])
                text = f"üìä –ü—Ä–æ–≥–Ω–æ–∑ –¥–Ω—è: {best[0]} —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é —Ä–æ—Å—Ç–∞ {best[1]*100:.2f}%"
                for user_id in subscribers:
                    try:
                        asyncio.create_task(app.bot.send_message(chat_id=user_id, text=text))
                    except Exception as err:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {err}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –ø—Ä–æ–≥–Ω–æ–∑–µ: {e}")
    asyncio.run(send())

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = BackgroundScheduler()
scheduler.add_job(send_forecast_to_all, "cron", hour=10, minute=0)
scheduler.start()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("subscribe", subscribe))
app.add_handler(CommandHandler("forecast", forecast))
app.add_handler(CommandHandler("stats", stats))

# –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
if __name__ == "__main__":
    print("ü§ñ ML-–∏–Ω–≤–µ—Å—Ç-–±–æ—Ç —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()
