
import logging
import asyncio
import json
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from modules.data_loader import load_all_data
from modules.ml_engine import prepare_dataset, train_model, predict_today
from modules.logger import log_prediction, update_actual_returns, get_stats
from datetime import datetime, time, timedelta

TOKEN = '7904337093:AAFtX2tjlkiyfqgAyBcgU5d4qsthdI74bkM'
SUBSCRIBERS_FILE = 'subscribers.json'

logging.basicConfig(level=logging.INFO)

# === –ü–æ–¥–ø–∏—Å–∫–∞ ===
def add_subscriber(chat_id):
    try:
        with open(SUBSCRIBERS_FILE, 'r') as f:
            subs = json.load(f)
    except:
        subs = []
    if chat_id not in subs:
        subs.append(chat_id)
        with open(SUBSCRIBERS_FILE, 'w') as f:
            json.dump(subs, f)

def remove_subscriber(chat_id):
    try:
        with open(SUBSCRIBERS_FILE, 'r') as f:
            subs = json.load(f)
        subs = [cid for cid in subs if cid != chat_id]
        with open(SUBSCRIBERS_FILE, 'w') as f:
            json.dump(subs, f)
    except:
        pass

def get_subscribers():
    try:
        with open(SUBSCRIBERS_FILE, 'r') as f:
            return json.load(f)
    except:
        return []

# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —É–º–Ω—ã–π –∏–Ω–≤–µ—Å—Ç-–±–æ—Ç —Å –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º.\n"
        "üì© –ò—Å–ø–æ–ª—å–∑—É–π /subscribe —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n"
        "üìä –ö–æ–º–∞–Ω–¥—ã:\n"
        "/forecast ‚Äî –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–≥–Ω–æ–∑–∞–º\n"
        "/unsubscribe ‚Äî –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è"
    )

async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    add_subscriber(chat_id)
    await update.message.reply_text("‚úÖ –¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã!")

async def unsubscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    remove_subscriber(chat_id)
    await update.message.reply_text("‚ùå –¢—ã –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤.")

async def forecast(update: Update = None, context: ContextTypes.DEFAULT_TYPE = None, auto=False, chat_id=None):
    if not auto and update:
        await update.message.reply_text("üîÑ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –∏ —Å—Ç—Ä–æ—é –ø—Ä–æ–≥–Ω–æ–∑. –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...")

    try:
        data = load_all_data()
        dataset = prepare_dataset(data)
        model3d, scaler3d = train_model(dataset, horizon="target_3d")
        pred3d = predict_today(model3d, scaler3d, data)
        top_ticker, top_prob3d = pred3d[0]

        model1d, scaler1d = train_model(dataset, horizon="target_1d")
        pred1d_dict = dict(predict_today(model1d, scaler1d, data))
        top_prob1d = pred1d_dict.get(top_ticker, 0)

        log_prediction(top_ticker, top_prob3d, top_prob1d)

        msg = (
            f"üìà *–ê–∫—Ü–∏—è –¥–Ω—è:* ${top_ticker}\n"
            f"üìä –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è: *{top_prob3d:.1%}*\n"
            f"‚ö° –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞: *{top_prob1d:.1%}*\n"
            f"üß† –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ 90 –¥–Ω–µ–π –ø–æ 100 –∞–∫—Ü–∏—è–º"
        )
        if auto:
            await context.bot.send_message(chat_id=chat_id, text=msg, parse_mode='Markdown')
        else:
            await update.message.reply_text(msg, parse_mode='Markdown')

    except Exception as e:
        msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥–Ω–æ–∑–µ: {e}"
        if auto:
            await context.bot.send_message(chat_id=chat_id, text=msg)
        elif update:
            await update.message.reply_text(msg)

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    update_actual_returns()
    result = get_stats()
    await update.message.reply_text(result)

async def daily_forecast_task(app):
    while True:
        now = datetime.now()
        run_time = datetime.combine(now.date(), time(10, 0))
        if now > run_time:
            run_time += timedelta(days=1)
        wait_seconds = (run_time - now).total_seconds()
        await asyncio.sleep(wait_seconds)

        subs = get_subscribers()
        for chat_id in subs:
            context = ContextTypes.DEFAULT_TYPE()
            dummy_job = type('Dummy', (), {'chat_id': chat_id})()
            await forecast(context=context, auto=True, chat_id=chat_id)

# === –ó–∞–ø—É—Å–∫ ===
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("subscribe", subscribe))
app.add_handler(CommandHandler("unsubscribe", unsubscribe))
app.add_handler(CommandHandler("forecast", forecast))
app.add_handler(CommandHandler("stats", stats))

print("ü§ñ ML-–∏–Ω–≤–µ—Å—Ç-–±–æ—Ç —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –∑–∞–ø—É—â–µ–Ω")
app.run_polling()
